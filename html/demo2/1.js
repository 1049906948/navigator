// tts播放文件
const qingzhayan =
  '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//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV'
const xiangyouzhuantou =
  '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qqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqq//MoxFQAAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqq//MoxI8AAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqq//MoxMQAAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqq//MoxMQAAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqq//MoxMQAAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqq//MoxMQAAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqq//MoxMQAAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqq//MoxMQAAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqq//MoxMQAAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqq//MoxMQAAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqq//MoxMQAAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//MoxMQAAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//MoxMQAAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//MoxMQAAANIAAAAAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq'
const xiangzuozhuantou =
  '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XVwupRWVSTUmEBZr6hb/ULCwuK1MQU1FMy45OS41VVVVVVVV//MoxHQMyIZwHsPMSlVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxHsL6LFAyDJSTFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxIYAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMEAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV'
const yanzhengtonguo =
  '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'
const zhangzui =
  '//MoxAAKcAamX0AQAErbdHLNCgBAoEHCBQxb5PED9b/n8u+pzv8/o/B//4Of//zigQB8H/8hqfnz8kRen/////////7onu+5//MoxBEQEwq4AYEoARvc7kZjVPkFiUXZZx3sbIOOJmZnZ3QioHEGfVrHWct4nYtYoMc1FFX2WVAEFRlqlf/Zt/wB9tcB8+4o//MoxAsOQiseX8goAhkA5Z5CbkEjzxSb453/3b///////v/rrkIjopmNf/X+t3q8VkDTREJf/1XCxmr//NJ6AHBWnMol9Qwh//MoxA0QAaLAAHwElJIUKCUFcmTylMdL59N/Uzv//0///+n9Xs61PUcIeVHIEAYCWsCH4gAYhZEy3JFzSv/8HDf+Z+xfALOT//MoxAgPMX7IypxElKxqyKJMhs4HmIJE0XnSWNcXMVl+spG36v9v7f5v1H/IBiSt1KGFG4Ku3csDT4v0iLS7q7Oh9SZQCGIG//MoxAYN2fKwAJwKmDwLIHk+y1GYDKSLmbWUICjvanaWSr/NG+o7/cn5B/5QZ/qHn/R/3/o37P+wsHbiz30qEEjsltttoAH///MoxAkPGTryX08QAs3/0cIRChj39YBdqzbj/4Ux1Ur1GF/wrt0MGO/yl+Ywortd1ElHBBwT1BNTWAJ9Dr2s/TWVswzfyvZB//MoxAcO4YaUAZuAADYAJOMLSGKuFKpQIQSllVNkClLJeRR5Wlleil86fmNf+nW871/5vY/SUiylspf/NmTrd/jV/5iKRjgx//MoxAYOKiLQAYIoAG5GibWCYH8tGOd3/NN/+lat//u1UOpU2/5Ge6GneXNsX/8jnFwyx8FWLO/9Sy5A/W/8qv///8ZqG2ZL//MoxAgOGVLMAc9oANe1rW1rbqELeGkoi6aor2OBFDY2e6vQM6t/nGV0PWZFB2snqSWZN6zX2+sGfn///VUMz8//8D9vCaPT//MoxAoMsSbZlFNOcOvuBShXFj1KQ6BEKO30OEZv6oNiQs/qNRqNm9HyoKs/5VbvkeWDgjBBLTjf/Pw+pZFuBKBMJB0My2j5//MoxBINETK9lFQOcAbknnWpM4/EYRS2/8oHt/qztf/OHv/w5//+qIlSpV3//wbVDhVjltFotoH3HT6wgBKo2ToqWpbiyI9l//MoxBgMmNLiXjtUcrJPdz2L+vmDAAqNW/+//6f//2//JfUe20B1ChGBK7baLbaBxQCCcoaYCAjxcoVgQPWMYebEaOoFmlhG//MoxCANIM7eXhDGcojxgLUsVHHzKFf/9HtR/+n/+8/+qj/+53TKQkLAmoTU2w4g+KhzXMziid0P7lBEjo//+r93Z7+px84Y//MoxCYLqAKsy0MQAEGyknGqtaBAnXP//zeP/4B5BnbDOy1gQ4hJ372tXQZOKTf5/qd+G8RCHX3vV755fE1Gf/6/3vX8TEtY//MoxDIWWSK4y5l4APilL53i9b/L1WIYts9kmt+ERT/6cHza0q/z5Mpygy5aBf+9ZQXPuSr//co4mZ91InR1EFFxLqTMScR9//MoxBMMMRLQAc8QAHR1QIkOFLBIMDQ6uYlfX//RHSjIoKaPnyl3//icVh80Fv/////QUDW8siRNOs2cEi4qztmd39WyhFdn//MoxB0MoT8CWEmEcDWq3Vv9PXzGez5FGPLFDKDn1Z3EIRrghOkAU/dOB5WvPcQpDlGc56LV7yRgIScBXGf//9bVEWLOpBAi//MoxCUL6GrIABMeKHEPQ/uU8Uqf//9FHtkv/AA2/4HHgYsBPJy3xLZCnkNVCcpOipG9f///+WHkRx+9T9Y2WHnhYcf6/1UW//MoxDAMoHMmXhGMSpWyhSoAagP6Sw4OJIGgQMe9FhFBaIx84bPOV+9v////////6/qUsxmZ7UvqXpuokaFVLnW//0JVYAA///MoxDgNEfKwVDHEmMOVALSEMpoVkjSJwVZJIC53/////8SiIHQEWJEekkIgaDQdDR4eoqWT/Yw6eO1lkAiCIyOLURJGigMo//MoxD4MuFKIVBJMJDgAsUAhgoIGEDoZ+Ks/////zAVFRUV9QsLCxIBCwsLVTEFNRTMuOTlMQU1FMy45OS41VVVVVVVVVVVV//MoxEYKmG0ACAmGKFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxFYAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxJEAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV'

const start =
  ''
const luzhichenggong =
  ''
const jijiangkaishiluzhi =
  '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hiDls7/03KTEkigZAFfylMUwdAYHQwE4hkDSC0dHlLr///5i//MoxE8NQXaQAHtElWY//////6mKGBhQQOPU3/6hYVVMQU1FMy45OS41VVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxFULIXGcNCoElFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxGMAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxJ4AAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//MoxMQAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV'
// SocketSDK.js
class SocketSDK {
  constructor(option, callBackResult) {
    // 需要三方传递的参数
    this.serverUrl = option.serverUrl // socket地址
    this.debug = option.debug || false // 是否加解密
    this.code = option.code || '' // code
    this.callBackResult = callBackResult // 结果返回 包括成功失败
    // 自定义的参数
    this.websocket = null
    this.beforeDestroyStr = false // 离开销毁和验证通过的时候需要将其设置为true，防止多次出现socket连接关闭的问题
    this.successORErrorMsg = {} // 摄像打开成功或者失败得消息
    this.isSend = false // 是否把摄像头打开消息内容发送给后台

    this.binaryisEncryption = 1 // 二进制是否加密  0不加密 1加密
    // 加密用publicKey，解密用privateKey
    this.privateKey = ''
    this.publicKey = ''

    // 图片上传给后台得功能定义参数
    this.aCanvas = null
    this.ctx = null
    this.canvasImg = ''
    this.aCanvasWidth = 480
    this.aCanvasHeight = 640
    // 传递给后台得图片压缩比例设置，设置范围0-1
    this.compressionRatio = 0.75
    this.islocalization = '' //  状态码（0-成功，2-活体检测错误 3-code无效 4 无法打开摄像头，5、WebSocket 连接关闭 6、WebSocket连接断开）
    this.stageMap = (() => {
      const map = new Map()
      map.set('LEFT', '向左转头')
      map.set('RIGHT', '向右转头')
      map.set('BLINK', '眨眼')
      map.set('GAPE', '张嘴')
      return map
    })()
    this.audioNameMap = (() => {
      const map = new Map()
      map.set('LEFT', 'xiangzuozhuantou')
      map.set('RIGHT', 'xiangyouzhuantou')
      map.set('BLINK', 'qingzhayan')
      map.set('GAPE', 'zhangzui')
      return map
    })()

    // 视频播放
    this.audioContext = null
    this.sourceNode = null //播放得对象
    this.pausedStop = false //  默认没有暂停
    this.isSedFinal = false //  是否发送结束指令
    this.currentMessage = 0 //  暂未收到一个消息 则环境检测中
    this.setInterval = null

    this.arrowInterval = null //  左右箭头定时器
    this.actionInterval = null // 动作定时器
    this.arrowimages = [
      './assets/image/action/arrow1.png',
      './assets/image/action/arrow2.png',
      './assets/image/action/arrow3.png',
    ]
    this.actionIMages = {
      openmouth: [
        './assets/image/action/cwOpenMouth1@2x_1.png',
        './assets/image/action/cwOpenMouth2@2x_2.png',
      ],
      headleft: [
        './assets/image/action/cwTurnLeft1@2x.png',
        './assets/image/action/cwTurnLeft2@2x.png',
        './assets/image/action/cwTurnLeft3@2x.png',
        './assets/image/action/cwTurnLeft4@2x.png',
        './assets/image/action/cwTurnLeft5@2x.png',
      ],
      headright: [
        './assets/image/action/cwTurnRight1@2x.png',
        './assets/image/action/cwTurnRight2@2x.png',
        './assets/image/action/cwTurnRight3@2x.png',
        './assets/image/action/cwTurnRight4@2x.png',
        './assets/image/action/cwTurnRight5@2x.png',
      ],
      wink: ['./assets/image/action/cwBlink1@2x.png', './assets/image/action/cwBlink2@2x.png'],
    }
  }

  // 示例方法
  async init() {
    // // 首先判断入参是否正确  如果不正确 终止流程
    // this.openStream();
    // // this.setAudioDIVHtml("block", "firstOn.png", "准备阶段");
    // // 动作提醒播报
    // // this.setActionTipHtml("block", "headleft", "请向左转头");
    // let index=0
    // setInterval(() => {
    //   index++;
    //   this.setActionTipHtml('none','','')
    //   if (index%2==0) {
    //     this.setActionTipHtml("block", "headleft", "请向左转头");
    //   }else{
    //     this.setActionTipHtml("block", "openmouth", "请张嘴");
    //   }
    // }, 1000); // 每秒钟执行一次

    // return;
    if (!this.code) {
      this.callBackResult({
        type: 'ERRORPARAM',
        message: 'code参数缺失',
      })
      return
    }
    if (!this.serverUrl) {
      this.callBackResult({
        type: 'ERRORPARAM',
        message: 'socket连接地址参数缺失',
      })
      return
    }

    // 播放tts 解决ios部分手机声音小和没有声音得问题
    this.audioContext = await new AudioContext({ latencyHint: 'balanced' })
    await this.audioContext.createMediaStreamDestination()
    // 画布用来渲染摄像头内容
    // this.aCanvas = document.createElement("canvas"); // 创建canvas标签
    // this.aCanvas.width = this.aCanvasWidth;
    // this.aCanvas.height = this.aCanvasHeight; // 设置宽高
    // this.ctx = this.aCanvas.getContext("2d");
    this.setAudioDIVHtml('block', 'firstOn.png', '准备阶段')
    if (this.currentMessage == 0) {
      this.setActionTipHtml('block', '', '环境检测中')
    }
    // 创建并初始化Socket连接
    let websocketurl = ''
    // 完整得socket地址
    if (this.serverUrl.indexOf('wss://') != -1 || this.serverUrl.indexOf('ws://') != -1) {
      websocketurl = `${this.serverUrl}?code=${this.code}&debug=${this.debug}`
    } else {
      // 只有后缀得地址
      websocketurl = `wss://${window.location.hostname}:${window.location.port}/${this.serverUrl}?code=${this.code}&debug=${this.debug}` // 参数中不包含端口号
    }
    this.websocket = new WebSocket(websocketurl)
    this.websocket.binaryType = 'arraybuffer' // 设置二进制数据类型为 ArrayBuffer
    // 监听Socket事件并处理
    this.websocket.onopen = () => {
      // Socket连接成功事件处理
      console.log('WebSocket 连接成功')
      this.openStream() // 打开摄像头
    }

    this.websocket.onmessage = (event) => {
      // 收到消息事件处理
      this.getMeaasge(event)
      // 如果收到成功消息，则回传给调用方
    }

    this.websocket.onclose = (event) => {
      console.log('WebSocket 连接关闭', this.websocket)
      if (!this.beforeDestroyStr) {
        this.goBack('WebSocket 连接关闭', '5')
      }
    }
  }
  send(data) {
    // 发送消息到Socket服务器
    this.websocket.send(data)
  }
  destroy() {
    // 断开Socket连接并释放资源
    this.websocket.close()
    this.websocket = null
  }
  onSuccess() {
    // 成功消息处理逻辑
  }

  // 历史progress方法中的方法--------
  // 打开摄像头
  openStream = async () => {
    try {
      if (window.streamWindow) {
        window.streamWindow.getTracks().forEach((track) => {
          track.stop()
        })
      }
      const VIDEO_CONSTRAINS = {
        qvga: { width: { ideal: 320 }, height: { ideal: 240 } },
        vga: { width: { ideal: 640 }, height: { ideal: 480 } },
        hd: { width: { ideal: 1280 }, height: { ideal: 960 } },
      }
      var CURRENTVIDEO = {}
      CURRENTVIDEO = this.deepClone(VIDEO_CONSTRAINS['vga'])
      if (!this.isMobilePhone()) {
        // 如果是电脑调整电脑摄像头得宽高比例
        let oldwidth = await CURRENTVIDEO.width
        let oldheight = await CURRENTVIDEO.height
        CURRENTVIDEO.width = await oldheight
        CURRENTVIDEO.height = await oldwidth
      }
      let stream = null
      if (navigator.mediaDevices) {
        stream = await navigator.mediaDevices.getUserMedia({
          video: {
            facingMode: 'user',
            ...CURRENTVIDEO,
            frameRate: { ideal: 15 }, // 帧率
          },
          audio: false,
        })
      } else {
        stream = await navigator.webkitGetUserMedia({
          video: {
            facingMode: 'user',
            ...CURRENTVIDEO,
            frameRate: { ideal: 15 }, // 帧率
          },
          audio: false,
        })
      }
      window.streamWindow = stream
      this.trackVideo = stream.getVideoTracks()[0]
      this.trackAudio = stream.getAudioTracks()[0]
      if (!this.isSedFinal) {
        // 如果已经给后台发送了结束得指令 不在渲染页面
        //获取video或者autio元素,
        await this.setAudioDIVHtml('none', 'passIMG.png', '开始活体检测中')
        setTimeout(() => {
          const el = document.getElementById(`video-el`)
          // el.style.display = "block";
          el.controls = false
          el.srcObject = stream
          el.play().catch((error) => console.log('videoElem.play() failed:%o', error))
        }, 200)

        const myCanvas = document.getElementById(`myCanvas`)
        myCanvas.style.display = 'block'
        myCanvas.width = this.aCanvasWidth
        myCanvas.height = this.aCanvasHeight // 设置宽高
        const myCanvasCtx = myCanvas.getContext('2d')
        const than = this
        this.setInterval = window.setInterval(function () {
          const el = document.getElementById(`video-el`)
          myCanvasCtx.drawImage(el, 0, 0, than.aCanvasWidth, than.aCanvasHeight) //将获取视频绘制在画布上
        }, 15)
        console.log('video start')
        // 发送消息给后台  CAMERA_READY：摄像头正常打开
        this.successORErrorMsg = {
          msgTyp: 'FRONT_STATUS',
          frontStatus: 'CAMERA_READY',
        }
        this.sedMessageSuccessReeor()
      } else {
        if (window.streamWindow) {
          window.streamWindow.getTracks().forEach((track) => {
            track.stop()
          })
        }
      }
    } catch (error) {
      this.successORErrorMsg = {
        msgTyp: 'FRONT_ERR',
        errMsg: '打开摄像头失败',
        frontStatus: error,
      }
      this.sedMessageSuccessReeor()
      this.islocalization = '4'
      this.goBack('获取摄像头失败' + error)
      console.log('设备占用，无法获取' + error)
    }
  }
  // 判断什么时候发送给后台摄像头打开和打开失败得消息
  sedMessageSuccessReeor = () => {
    if (this.privateKey && !this.isSend && this.successORErrorMsg.msgTyp) {
      this.isSend = true
      this.sedMessage(this.successORErrorMsg)
    }
  }
  // 渲染收到消息处理
  renderingMeaasge = (data) => {
    // var body1 = document.getElementById("containerprogress");
    this.currentMessage++
    // 清除环境检测
    if (this.currentMessage == 1) {
      this.setActionTipHtml('none', '', '环境检测中')
    }
    if (!data || !data.msgTyp) {
      return
    }
    switch (data.msgTyp) {
      //用户信息
      case 'USER': {
        this.privateKey = data.g2PrivateKey // 私钥
        this.publicKey = data.g1PublicKey // 公钥
        this.sedMessageSuccessReeor()
        break
      }
      //图片指令
      case 'PIC': {
        this.getCanvasImg()
        break
      }
      // 动作指令
      case 'ACTION': {
        const action = data.action
        if (action != 'NOTHING') {
          this.showNormalMessage(
            '请' + this.stageMap.get(action),
            false,
            this.audioNameMap.get(action),
            action,
          )
        }
        break
      }
      // 每一次动作成功之后，清除页面动作gif
      case 'ACTION_PASS': {
        // 清除动作指令
        this.setActionTipHtml('none', '', '')
        break
      }
      // 炫彩指令
      case 'COLOR': {
        let color = data.color
        this.callBackResult({
          type: 'COLOR',
          color: color || 'white',
          message: '炫彩',
        })
        break
      }
      // 提示信息
      case 'WARN': {
        if ($('#WARN').css('display') == 'none') {
          $('#WARN>div').html(data.msg)
          $('#WARN').css('display', 'block')
          setTimeout("document.getElementById('WARN').style.display='none'", 2000)
        }
        // this.callBackResult({ type: "WARN", message: data.msg });
        break
      }
      // 终结指令
      case 'FINAL': {
        //code： 1表示验证通过成功， 2 活体检测错误  3 code无效
        let code = data.code
        this.islocalization = code
        // 清除定时器
        clearInterval(this.arrowInterval)
        clearInterval(this.actionInterval)
        switch (code) {
          case '1': {
            this.beforeDestroyStr = true // 避免后台socket连接关闭 导致渲染不结束
            this.showNormalMessage('验证通过', true, 'yanzhengtonguo', 'PASS')

            setTimeout(() => {
              this.islocalization = 0
              // 增加关闭socket的代码
              if (this.websocket) {
                this.websocket.close()
              }
              this.goBack('验证通过')
            }, 2000)
            break
          }
          case '2': {
            // 错误得提示
            // body1.style.backgroundColor = "white";
            this.goBack(data.msg)
            break
          }
          case '3': {
            // 3 code无效 具体逻辑再goBack中
            // body1.style.backgroundColor = "white";
            this.goBack(data.msg)
            break
          }
          default:
            console.log(data) // 如果没有与表达式相同的值，则执行该代码
        }
        console.log('成功失败得指令')
        break
      }
      // 授权码失败得情况消息
      default: {
        console.log(data)
      }
    }
  }
  getCanvasImg = async () => {
    // 模拟一些耗时任务
    const el = document.getElementById(`video-el`)
    let timestamp = Date.now()
    // this.ctx.drawImage(el, 0, 0, this.aCanvasWidth, this.aCanvasHeight); //将获取视频绘制在画布上
    // 方法一：摄像头内容以图片base64格式传递给后台得功能
    const myCanvas = document.getElementById(`myCanvas`)
    this.canvasImg = myCanvas.toDataURL('image/jpeg', this.compressionRatio) //图片压缩
    // 压缩限制
    let dataLength = this.canvasImg.length
    let compressionRatioTmp = this.compressionRatio
    while (!this.canvasImg || dataLength > 40000) {
      console.log('yasuo', dataLength, compressionRatioTmp)
      this.canvasImg = myCanvas.toDataURL('image/jpeg', compressionRatioTmp) //图片压缩
      dataLength = this.canvasImg.length
      compressionRatioTmp = compressionRatioTmp - 0.05
    }
    let data = this.canvasImg.split('base64,')[1]
    // 发送base64数据
    let picMsg = {
      msgTyp: 'FRONT_PIC',
      picType: 'jpg',
      pic: data,
      timestamp: timestamp,
    }
    this.sedMessage(picMsg)
  }
  // 清除正在定时器，不在给后台发送图片
  cleanCanvasImg = () => {
    clearTimeout(this.timeID)
    this.timeflag = false
  }
  //播放音频----------start------------
  playAudio = async (message, name) => {
    let arrobj = {
      xiangyouzhuantou,
      xiangzuozhuantou,
      yanzhengtonguo,
      zhangzui,
      qingzhayan,
    }
    let mp3 = `data:audio/wav;base64,` + arrobj[name]
    await this.getStopAudio()
    const musicArrayBuffer = await this.getMp3ArrayBuffer(mp3)
    const decodedAudioData = await this.decode(musicArrayBuffer)
    this.playAudioVal(decodedAudioData)
  }

  playAudioVal = (decodedAudioData, text) => {
    this.sourceNode = this.audioContext.createBufferSource()
    this.sourceNode.buffer = decodedAudioData
    this.sourceNode.connect(this.audioContext.destination)
    this.sourceNode.start(0)
    this.pausedStop = false
    let _this = this
    this.sourceNode.onended = function () {
      console.log('新组件播放结束', _this.pausedStop)
    }
  }
  getMp3ArrayBuffer = async (url) => {
    return fetch(url).then((r) => r.arrayBuffer())
  }
  decode = async (arrayBuffer) => {
    let val = await this.audioContext.decodeAudioData(arrayBuffer)
    return val
  }
  // 监听播放结束
  getStopAudio = () => {
    if (this.sourceNode) {
      console.log('停止了吗')
      this.pausedStop = true
      this.sourceNode.stop(0) //立即停止
    }
  }
  //播放音频----------end------------

  //步骤提示
  showNormalMessage = (message, icon, name, action = 0) => {
    let srcgif = ''
    switch (action) {
      case 'LEFT': {
        srcgif = 'headleft'
        break
      }
      case 'RIGHT': {
        srcgif = 'headright'
        break
      }
      case 'BLINK': {
        srcgif = 'wink'
        break
      }
      case 'GAPE': {
        srcgif = 'openmouth'
        break
      }
      case 'PASS': {
        srcgif = 'wancheng'
        break
      }
      default: {
        console.log(action)
      }
    }
    if (icon) {
      // // 验证通过
      // this.setAudioDIVHtml("block", "passIMG.png", "活体检测成功");
      // this.setActionTipHtml("block", srcgif, message);
    } else {
      // 动作提醒播报
      this.setActionTipHtml('block', srcgif, message)
    }
    if (name) {
      this.playAudio(message, name)
    }
  }
  //出错返回
  goBack = (message, state) => {
    this.cleanCanvasImg() // 这里是清除给后台发送图片得定时器
    window.streamWindow = null
    if (this.goBackLock) {
      return
    }
    if (this.trackVideo) {
      this.trackVideo.stop()
    }
    if (this.trackAudio) {
      this.trackAudio.stop()
    }
    if (this.setInterval) {
      window.clearInterval(this.setInterval)
    }
    //MessageBox最多只能调用一次
    this.goBackLock = true
    if (this.websocket) {
      this.websocket.close()
    }
    if (!this.islocalization && this.islocalization != 0) {
      this.islocalization = state
    }
    this.isSedFinal = true
    this.callBackResult({
      type: 'FINAL',
      code: this.code,
      state: this.islocalization,
      message: message,
    })
  }
  //  历史progressCheck 页面方法-------------------------
  // 发消息
  sedMessage = (obj) => {
    if (this.debug === true || this.debug === 'true') {
      this.websocket.send(JSON.stringify(obj))
    } else {
      // 加密和不加密得二进制内容
      let binary = this.stringtoBinary(obj, this.publicKey)
      this.websocket.send(binary)
      // let json = this.binarytoString(binary,this.privateKey)// 前端测试代码自己解析二进制
      // console.log(json,'解析到得json')
    }
  }
  // 发送得消息转二进制  json对象 是否开启二进制解密还是json串   公钥加密
  stringtoBinary = (obj, publicKey) => {
    // 二进制加密
    let pic = obj.pic || ''
    delete obj.pic // 删除 obj 中的 foo 属性
    // json二进制
    let binaryJson = this.jsonToBinary(obj)
    // base64二进制
    let binaryPic = this.base64ToBinary(pic)
    let body = new ArrayBuffer(0) // 最后需要return得二进制
    if (this.binaryisEncryption == 1 && publicKey) {
      // 生成临时二进制
      var temporarybinart = new Uint8Array(binaryJson.byteLength + binaryPic.byteLength)
      temporarybinart.set(new Uint8Array(binaryJson))
      temporarybinart.set(new Uint8Array(binaryPic), binaryJson.byteLength)
      let array1 = temporarybinart.slice(0, 1000)
      let array2 = temporarybinart.slice(1000)
      const encode = '04' + sm2.doEncrypt(array1, publicKey) // 前1000为进行加密字符串
      const encodeData = new Uint8Array(this.hexToArray(encode)) // 字符串加密之后转二进制
      // 组合新得二进制发送给后台
      body = new Uint8Array(9 + encodeData.byteLength + array2.byteLength)
      body.set([1]) // 首位是 是否加解密得flag 0或者1
      body.set(this.numberToBytes(encodeData.byteLength), 1) // 1-4位是新加密生成二进制得长度字节
      body.set(this.numberToBytes(binaryJson.byteLength), 5) // 5-9位是json二进制长度得字节
      body.set(new Uint8Array(encodeData), 9)
      body.set(new Uint8Array(array2), 9 + encodeData.byteLength)
    } else {
      // 二进制不加密
      // 合并二进制数据
      body = new Uint8Array(9 + binaryJson.byteLength + binaryPic.byteLength)
      body.set([0]) // 首位是 是否加解密得flag 0或者1
      body.set(this.numberToBytes(0), 1) // 1-4位是0得4字节
      body.set(this.numberToBytes(binaryJson.byteLength), 5) // 5-9位是json二进制长度得4字节
      // 加盐逻辑 对两个二进制进行偏移量处理
      body.set(this.offsetBinary(binaryJson, binaryJson.byteLength), 9)
      body.set(this.offsetBinary(binaryPic, binaryJson.byteLength), 9 + binaryJson.byteLength)
    }
    return body
  }
  // 收到消息处理
  getMeaasge = (message) => {
    try {
      var jsonObj = JSON.parse(message.data)
      this.renderingMeaasge(jsonObj) //处理收到得消息
      // 解析成功，说明数据为 JSON 字符串
    } catch (e) {
      let jsonObj = this.binarytoString(new Uint8Array(message.data), this.privateKey)
      this.renderingMeaasge(jsonObj) //处理收到得消息
    }
  }
  // 二进制消息转原始消息  私钥解密
  binarytoString = (binaryData, privateKey) => {
    //加密数据得长度,如果是0  表示不加密
    var tobinaryLength = this.bytesToNumber(binaryData.slice(1, 5))
    // 分离 JSON 数据和 Base64 编码的二进制流
    var jsonData = ''
    var picData = ''
    if (tobinaryLength != 0) {
      // 截取二进制中加密得二进制数据
      let encryptionBinary = binaryData.slice(9, tobinaryLength + 9)
      // 没有加密得二进制数据
      let notencryptionBinary = binaryData.slice(tobinaryLength + 9)
      // 二进制转字符串
      let encryptionString = this.arrayToHex(encryptionBinary)
      let cleartext = sm2.doDecrypt(
        encryptionString.substr(2),
        privateKey,
        1, // 下面两个1 和 数组 必须写 为了解析出来数组
        { output: 'array' },
      ) //解密data
      let decryptBinary = new Uint8Array(cleartext)
      // // 创建新的 ArrayBuffer
      const newBuffer = new Uint8Array(decryptBinary.byteLength + notencryptionBinary.byteLength)
      newBuffer.set(new Uint8Array(decryptBinary))
      newBuffer.set(new Uint8Array(notencryptionBinary), decryptBinary.byteLength)
      // json长度
      var binaryJsonLength = this.bytesToNumber(binaryData.slice(5, 9))
      // 分离 JSON 数据和 Base64 编码的二进制流
      jsonData = newBuffer.slice(0, binaryJsonLength)
      picData = newBuffer.slice(binaryJsonLength)
    } else {
      // json长度
      var binaryJsonLength = this.bytesToNumber(binaryData.slice(5, 9))
      // 分离 JSON 数据和 Base64 编码的二进制流
      jsonData = binaryData.slice(9, binaryJsonLength + 9)
      picData = binaryData.slice(binaryJsonLength + 9)
      // 加盐逻辑 对两个二进制进行偏移量处理
      jsonData = this.offsetBinary(jsonData, -binaryJsonLength)
      picData = this.offsetBinary(picData, -binaryJsonLength)
    }
    // 解析 JSON 数据
    var jsonString = new TextDecoder().decode(jsonData)
    var data = jsonString ? JSON.parse(jsonString) : {}
    // // 解码 Base64 编码的二进制流
    const base64String = btoa(String.fromCharCode.apply(null, picData))
    if (base64String) {
      data.pic = base64String
    }
    return data
  }
  // base64转二进制
  base64ToBinary = (base64) => {
    var binaryStr = atob(base64)
    var len = binaryStr.length
    var bytes = new Uint8Array(len)
    for (var i = 0; i < len; i++) {
      bytes[i] = binaryStr.charCodeAt(i)
    }
    return bytes.buffer
  }
  // json串转二进制
  jsonToBinary = (jsonObj) => {
    var jsonStr = JSON.stringify(jsonObj)
    // 将字符串转换为二进制数据
    const buffer = new TextEncoder().encode(jsonStr)
    return buffer
  }
  // 将数字转换成4字节的字节数组
  numberToBytes = (num) => {
    // 使用一个数组缓冲区存储字节数组
    var buffer = new ArrayBuffer(4)
    // 使用 DataView 将数字写入数组缓冲区
    var view = new DataView(buffer)
    view.setInt32(0, num)
    // 将数组缓冲区转换成字节数组
    return new Uint8Array(buffer)
  }
  // 将字节数组转换成数字
  bytesToNumber = (bytes) => {
    // 使用一个数组缓冲区存储字节数组
    var buffer = new ArrayBuffer(4)
    // 使用 DataView 读取字节数组内容到缓冲区
    var view = new DataView(buffer)
    for (var i = 0; i < 4; i++) {
      view.setUint8(i, bytes[i])
    }
    // 使用 DataView 读取缓冲区中的数字
    var num = view.getInt32(0)
    // 返回数字
    return num
  }

  /**
   * 转成字节数组
   */
  hexToArray = (hexStr) => {
    const words = []
    let hexStrLength = hexStr.length
    if (hexStrLength % 2 !== 0) {
      hexStr = leftPad(hexStr, hexStrLength + 1)
    }
    hexStrLength = hexStr.length
    for (let i = 0; i < hexStrLength; i += 2) {
      words.push(parseInt(hexStr.substr(i, 2), 16))
    }
    return words
  }
  /**
   * 转成16进制串
   */
  arrayToHex = (arr) => {
    arr = Array.prototype.slice.call(arr)
    return arr
      .map((item) => {
        item = item.toString(16)
        return item.length === 1 ? '0' + item : item
      })
      .join('')
  }
  // 加盐 偏移量
  offsetBinary = (array, offset) => {
    array = new Uint8Array(array)
    const increasedArray = array.map((value) => value + offset)
    return increasedArray
  }

  // -------下面是定义的一些公共调用的方法 没有业务逻辑 都是处理数据调用的-------
  // 深拷贝
  deepClone = (obj) => {
    let copy = Object.create(Object.getPrototypeOf(obj))
    let propNames = Object.getOwnPropertyNames(obj)
    propNames.forEach(function (items) {
      let item = Object.getOwnPropertyDescriptor(obj, items)
      Object.defineProperty(copy, items, item)
    })
    return copy
  }
  // 是否是手机
  isMobilePhone = () => {
    var ua = navigator.userAgent
    var ipad = ua.match(/(iPad).*OS\s([\d_]+)/),
      isIphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/),
      isAndroid = ua.match(/(Android)\s+([\d.]+)/),
      isMobile = isIphone || isAndroid
    return isMobile
  }

  // 解决url多个参数编码解析 // console.log(encodeURIComponent('https://juejin.cn/frontend?a=1&b=2'))
  addParamToUrl = (url, param) => {
    if (/[\?&]/.test(url)) {
      return url + '&' + param
    } else {
      return url + '?' + param
    }
  }
  // 左右箭头动画
  arrowAnimation = (display, type) => {
    // display 设置隐藏 还是打开，type区分左右左右转头
    console.log(display, type)
    let index = 0
    var element = document.getElementById('imageArrow')
    if (display == 'none') {
      element.style.display = display
      clearInterval(this.arrowInterval)
    } else {
      if (type == 'right') {
        element.classList.add('newClass')
      } else {
        // 清除元素的类
        element.classList.remove('newClass')
      }
      this.arrowInterval = setInterval(() => {
        element.style.display = display
        element.src = this.arrowimages[index]
        index++
        if (index == this.arrowimages.length) {
          index = 0 // 当到达最后一张图片时，重置为第一张图片
        }
      }, 300) // 每秒钟执行一次
    }
  }

  // 动作动画
  actionAnimation = (display, type, meassage) => {
    // display 设置隐藏 还是打开，眨眼 张嘴 左转  右转
    let index = 0
    var element = document.getElementById('actionImage')
    element.style.display = display
    if (display == 'none') {
      clearInterval(this.actionInterval)
    } else {
      this.actionInterval = setInterval(() => {
        element.src = this.actionIMages[type][index]
        index++
        if (index == this.actionIMages[type].length) {
          index = 0 // 当到达最后一张图片时，重置为第一张图片
        }
      }, 300) // 每秒钟执行一次
    }
  }
  // 设置html样式
  setAudioDIVHtml = (diaplay, imgsrc, message) => {
    // 摄像头展示得时候 环境检测结束
    if (diaplay == 'none') {
      this.setActionTipHtml('none', 'start', '')
    }
    this.callBackResult({
      type: 'STYLE',
      el: '#audioDiv',
      html: ` <img class="imgPre" id="imgPre" style='display:${diaplay}' src="./assets/image/${imgsrc}" alt="" />
      <!-- 准备成功 视频回显地址 -->
      <video id="video-el" style="display:none" autoPlay playsInline muted></video>
      <canvas id="myCanvas"></canvas>`,
      message: message,
    })
  }
  // 设置html样式
  setActionTipHtml = (display, imgsrc, message) => {
    let html = ''
    let htmlTopTip = message
    if (display == 'block' && message == '环境检测中') {
      html = ``
      htmlTopTip = ''
      this.actionAnimation('none', 'start', message)
    } else if (display == 'block') {
      this.actionAnimation(display, imgsrc, message)
      // html = `
      // <img class="img" style="display:${imgsrc}?'block':'none'" src="./assets/image/${imgsrc}.gif" alt="" />`;
    } else {
      // html = ``;
      this.actionAnimation('none', '', message)
    }
    // this.callBackResult({
    //   type: "STYLE",
    //   el: "#actionTip",
    //   html: html,
    //   htmlTopTip: htmlTopTip,
    //   message: "动作提醒",
    // });

    this.callBackResult({
      type: 'STYLE',
      el: '#actionTipText',
      html: htmlTopTip,
      message: '顶部动作文案提醒',
    })
    //  左右箭头得功能逻辑处理
    if (display == 'none') {
      // 当前动作通过 清除页面定时器
      this.arrowAnimation('none', '')
    } else if (display == 'block' && imgsrc == 'headleft') {
      this.arrowAnimation('block', 'left')
    } else if (display == 'block' && imgsrc == 'headright') {
      this.arrowAnimation('block', 'right')
    }
  }
}
